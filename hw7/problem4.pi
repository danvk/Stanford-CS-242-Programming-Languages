
# Note: _zero and _succ are globals, used to encode numbers
# zero is a channel used by ZERO to provide fresh zeroes on demand, and
# similarly for one, two.

def ZERO = !(&c. (_zero -> c.0 | c -> zero. 0));
def ONE = !(&d. (_succ -> d. _zero -> d.0 | d -> one. 0));
def TWO = !(&c. (_succ -> c. _succ -> c. _zero -> c.0 | c -> two. 0));

# idea:
# - receive a channel c on the `inc` channel
# - receive a number n on the `inc` channel
# - send _succ to channel c
# - repeatedly:
#   - receive _zero on channel n => send _zero to c
#   - receive _succ on channel c => send _succ to c

def INC = !(c <- inc.
          n <- c.
          &v.
          &sem.
          (
          v -> c. _succ -> v. _zero -> sem. 0
          |
          !tmp <- sem.(
            msg <- n.
            msg -> v.
            tmp -> sem.
            0
          )));

#             [msg = _zero]. _zero -> v.0 +
#             [msg = _succ]. _succ -> v.0

# Expected output:
#   _succ -> result. 0
# | _zero -> result. 0
# | ...
# ZERO | INC | x <- zero. &r. r->inc. x -> r. v <- r. !(x <- v. x -> result. 0);

# Expected output:
#   _succ -> result. 0
# | _succ -> result. 0
# | _zero -> result. 0
# | ...
# ONE | INC | x <- one. &r. r->inc. x -> r. v <- r. !(x <- v. x -> result. 0);


# The following two tests make sure that the resulting number outputs _succ before _zero.
# Expected output:
#   _succ -> a. 0
# | _succ -> b. 0
# | _succ -> c. 0
# | _zero -> d. 0
# | ...
# With no something -> e. 0 at the top level
# TWO | INC | x <- two. &r. r->inc. x -> r. v <- r.
#                           x <- v. (x -> a. 0 |
#                           x <- v. (x -> b. 0 |
#                           x <- v. (x -> c. 0 |
#                           x <- v. (x -> d. 0 |
#                           x <- v. (x -> e. 0)))));

# Expected output:
#   _succ -> a. 0
# | _succ -> b. 0
# | _succ -> c. 0
# | _zero -> d. 0
# | ...
# With no something -> e. 0 at the top level
ONE | INC | x <- one. &r. r->inc. x -> r. v <- r.
                      &r. r->inc. v -> r. v2 <- r.
                        x <- v2. (x -> a. 0 |
                        x <- v2. (x -> b. 0 |
                        x <- v2. (x -> c. 0 |
                        x <- v2. (x -> d. 0 |
                        x <- v2. (x -> e. 0)))));
